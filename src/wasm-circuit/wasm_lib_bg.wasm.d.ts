/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function hello(): void;
export function test1(): void;
export function test2(): void;
export function gen_proof(a: number, b: number): void;
export function verify_proof(a: number, b: number): number;
export function test_aes(): void;
export function test_SubtleCrypto(): number;
export function garble_circuit_to_output(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_mpcwork_free(a: number, b: number): void;
export function mpcwork_new(a: number, b: number, c: number): void;
export function mpcwork_setup_garble_circuit(a: number, b: number): void;
export function mpcwork_setup_encrypted_gates(a: number, b: number): void;
export function mpcwork_setup_input(a: number, b: number): void;
export function mpcwork_evaluate(a: number): number;
export function __wbg_zksender_free(a: number, b: number): void;
export function zksender_new(a: number, b: number, c: number, d: number): void;
export function zksender_get_pool_size(a: number): number;
export function zksender_get_iknp_sender_pubs(a: number): number;
export function zksender_setup_iknp_sender(a: number, b: number): void;
export function zksender_encrypt_iknp_sender(a: number): number;
export function zksender_silent_sender_init(a: number, b: number, c: number, d: number): void;
export function zksender_get_silent_sender_mpf_d(a: number): number;
export function zksender_decrypt_silent_sender_mpf(a: number, b: number): void;
export function zksender_prover_evaluate(a: number, b: number): number;
export function zksender_prover_waterfall_evaluate(a: number, b: number): number;
export function __wbg_zkreceiver_free(a: number, b: number): void;
export function zkreceiver_new(a: number, b: number, c: number, d: number): void;
export function zkreceiver_get_pool_size(a: number): number;
export function zkreceiver_setup_iknp_receiver(a: number, b: number): void;
export function zkreceiver_get_iknp_receiver_pubs(a: number): number;
export function zkreceiver_decrypt_iknp_receiver(a: number, b: number): void;
export function zkreceiver_silent_receiver_init(a: number, b: number, c: number, d: number): void;
export function zkreceiver_encrypt_silent_receiver_mpf(a: number, b: number): number;
export function zkreceiver_verifier_evaluate(a: number, b: number): number;
export function zkreceiver_verifier_waterfall_evaluate(a: number, b: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h2b21a46417bc02e3(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h7a9ac650d77a8bb4(a: number, b: number, c: number, d: number): void;
