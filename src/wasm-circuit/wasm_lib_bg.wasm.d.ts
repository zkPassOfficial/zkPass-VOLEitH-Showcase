/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_zksender_free(a: number, b: number): void;
export function zksender_new(a: number, b: number, c: number): Array;
export function zksender_get_pool_size(a: number): number;
export function zksender_get_iknp_sender_pubs(a: number): number;
export function zksender_setup_iknp_sender(a: number, b: number): void;
export function zksender_encrypt_iknp_sender(a: number): number;
export function zksender_silent_sender_init(a: number, b: number, c: number, d: number): void;
export function zksender_get_silent_sender_mpf_d(a: number): number;
export function zksender_decrypt_silent_sender_mpf(a: number, b: number): void;
export function zksender_prover_evaluate(a: number, b: number): number;
export function zksender_prover_waterfall_evaluate(a: number, b: number): number;
export function __wbg_zkreceiver_free(a: number, b: number): void;
export function zkreceiver_new(a: number, b: number, c: number): Array;
export function zkreceiver_get_pool_size(a: number): number;
export function zkreceiver_setup_iknp_receiver(a: number, b: number): void;
export function zkreceiver_get_iknp_receiver_pubs(a: number): number;
export function zkreceiver_decrypt_iknp_receiver(a: number, b: number): void;
export function zkreceiver_silent_receiver_init(a: number, b: number, c: number, d: number): void;
export function zkreceiver_encrypt_silent_receiver_mpf(a: number, b: number): number;
export function zkreceiver_verifier_evaluate(a: number, b: number): number;
export function zkreceiver_verifier_waterfall_evaluate(a: number, b: number): number;
export function voleith_gen_proof(a: number): number;
export function voleith_verify_proof(a: number, b: number): number;
export const __wbindgen_export_0: WebAssembly.Table;
export function __externref_table_dealloc(a: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __externref_table_alloc(): number;
export function __wbindgen_start(): void;
